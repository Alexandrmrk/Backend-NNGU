{"version":3,"sources":["../../src/controllers/PostsController.js"],"names":["PostsController","req","res","getPostById","params","id","post","json","Post","find","posts","model","body","authorId","userId","save","status","HttpError","header","content","end","findById","TryCatch"],"mappings":"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","sourcesContent":["import Post from '../models/Post';\nimport TryCatch from '../decorators/TryCatchMiddlewareDecorator';\nimport HttpError from '../exeptions/HttpError';\n\nclass PostsController {\n  @TryCatch\n  static async read(req, res) {\n    const post = await PostsController.getPostById(req.params.id);\n    res.json(post);\n  }\n\n  @TryCatch\n  static async list(req, res) {\n    const posts = await Post.find();\n    res.json(posts);\n  }\n\n  @TryCatch\n  static async create(req, res) {\n    const model = new Post({ ...req.body, authorId: req.userId });\n    const post = await model.save();\n\n    res.json({ status: true, post });\n  }\n\n  @TryCatch\n  static async update(req, res) {\n    const post = await PostsController.getPostById(req.params.id);\n\n    if (req.userId !== post.authorId) {\n      throw new HttpError('Access in closed', 403);\n    }\n\n    post.header = req.body.header;\n    post.content = req.body.content;\n    await post.save();\n\n    res.json({ status: true, post });\n  }\n\n  @TryCatch\n  static async delete(req, res) {\n    const post = await PostsController.getPostById(req.params.id);\n\n    if (req.userId !== post.authorId) {\n      throw new HttpError('Access in closed', 403);\n    }\n\n    await post.delete();\n\n    res.status(204).end();\n  }\n\n  static async getPostById(id) {\n    const post = await Post.findById(id);\n\n    if (!post) {\n      throw new HttpError('Post not found', 404);\n    }\n\n    return post;\n  }\n}\n\nexport default PostsController;\n"],"file":"PostsController.js"}